// Importação da interface Product
import { Product } from "./Product";

interface SortOption {
  label: string;
  action: () => void;
}

// URL do servidor
const serverUrl: string = "http://localhost:5000/products";

// Número de produtos carregados e produtos por página
let productsLoaded: number = 0;
const productsPerPage: number = 14;

// Array para armazenar os itens do carrinho
let cartItems: Product[] = [];

// Variáveis para controle da visualização em dispositivos móveis
const mobileScreenWidth: number = 1028;
let isMobileView: boolean = window.innerWidth <= mobileScreenWidth;

// Função principal
async function main(): Promise<void> {
    console.log(serverUrl);
    await loadInitialProducts(); // Carrega os produtos ao carregar a página
}

document.addEventListener("DOMContentLoaded", main);



// Função para carregar os produtos iniciais
async function loadInitialProducts(): Promise<void> {
    const initialProducts: Product[] = await loadProducts(0, productsPerPage);
    displayProducts(initialProducts);
    productsLoaded += initialProducts.length;
    await setupFilters();
    updateView();
}

// Função para carregar os produtos
async function loadProducts(start: number, limit: number): Promise<Product[]> {
    try {
        const response: Response = await fetch(`${serverUrl}?_start=${start}&_limit=${limit}`);
        return await response.json();
    } catch (error) {
        console.error("Erro ao carregar produtos:", error);
        return [];
    }
}

// Função para exibir os produtos na interface do usuário
function displayProducts(products: Product[]): void {
    const productsContainer: HTMLElement | null = document.querySelector(".product-grid");
    if (productsContainer) {
        products.forEach(product => {
            const productElement: HTMLElement = createProductElement(product);
            productsContainer.appendChild(productElement);
        });
    }
}

// Função para criar o elemento de produto
function createProductElement(product: Product): HTMLElement {
  const productElement: HTMLElement = document.createElement("div");
  productElement.classList.add("product");
  productElement.dataset.color = product.color;
  productElement.dataset.size = product.size.join(",");
  productElement.dataset.price = product.price.toString();

  const imageElement: HTMLImageElement = document.createElement("img");
  imageElement.src = product.image;
  imageElement.alt = product.name;
  productElement.appendChild(imageElement);

  const nameElement: HTMLHeadingElement = document.createElement("h3");
  nameElement.textContent = product.name;
  productElement.appendChild(nameElement);

  const priceElement: HTMLParagraphElement = document.createElement("p");
  priceElement.textContent = `Preço: R$ ${product.price.toFixed(2)}`;
  productElement.appendChild(priceElement);

  // Verifica se há informações de parcelamento e adiciona ao elemento
  if (product.parcelamento && product.parcelamento.length > 0) {
      const installmentElement: HTMLParagraphElement = document.createElement("p");
      const parcelaText = product.parcelamento.length > 1 ? "parcelas" : "parcela";
      const parcelaValue = product.parcelamento[0];
      installmentElement.textContent = `em até ${parcelaValue}x de R$ ${(product.price / parcelaValue).toFixed(2)} sem juros`;
      productElement.appendChild(installmentElement);
  }

  const buyButton: HTMLButtonElement = document.createElement("button");
  buyButton.textContent = "Comprar";
  buyButton.addEventListener("click", () => addToCart(product));
  productElement.appendChild(buyButton);

  return productElement;
}





// Função para adicionar um produto ao carrinho
function addToCart(product: Product): void {
    console.log(`Produto "${product.name}" adicionado ao carrinho.`);
    cartItems.push(product);
    updateCartCount(cartItems.length);
    // Mostrar toast informando que o produto foi adicionado ao carrinho
}

// Função para atualizar o contador de itens do carrinho
function updateCartCount(count: number): void {
    const cartCountElement: HTMLElement | null = document.querySelector(".cart-count");
    if (cartCountElement) {
        cartCountElement.textContent = count.toString();
    }
}

// Função para preencher os filtros com base nos produtos carregados
async function setupFilters(): Promise<void> {
    const colorFilter: HTMLElement | null = document.getElementById("color-filter");
    const sizeFilter: HTMLElement | null = document.getElementById("size-filter");
    const priceFilter: HTMLElement | null = document.getElementById("price-filter");

    if (colorFilter && sizeFilter && priceFilter) {
        const products: Product[] = await loadProducts(0, productsPerPage);
        const colors: Set<string> = new Set<string>();
        const sizes: Set<string> = new Set<string>();
        const prices: Set<number> = new Set<number>();

        products.forEach(product => {
            colors.add(product.color);
            product.size.forEach(size => sizes.add(size));
            prices.add(product.price);
        });

        populateListOptions(colors, colorFilter, "color");
        populateSizeFilter(sizes, sizeFilter, "size");
        populatePriceFilter(prices, priceFilter, "price");

        // Adicionando eventos de clique para os filtros
        colorFilter.addEventListener("change", applyFilters);
        sizeFilter.addEventListener("click", applyFilters);
        priceFilter.addEventListener("change", applyFilters);
    }
}

// Função para preencher as opções de lista
function populateListOptions(options: Set<string | number>, filterElement: HTMLElement, filterName: string): void {
  options.forEach(option => {
      const listItem = document.createElement("li");
      listItem.innerHTML = `
          <label>
              <input type="checkbox" name="${filterName}" value="${option}" onchange="applyFilters()">
              <span>${getOptionLabel(option)}</span>
          </label>
      `;
      filterElement.appendChild(listItem);
  });
}


// Função para preencher o filtro de tamanho
function populateSizeFilter(sizes: Set<string>, filterElement: HTMLElement, filterName: string): void {
    const sizeList: string[] = Array.from(sizes);
    const numberOfRows: number = Math.ceil(sizeList.length / 4);

    for (let i = 0; i < numberOfRows; i++) {
        const rowElement: HTMLDivElement = document.createElement("div");
        rowElement.classList.add("size-row");

        for (let j = 0; j < 4; j++) {
            const index: number = i * 4 + j;
            if (index < sizeList.length) {
                const size: string = sizeList[index];
                const optionElement: HTMLButtonElement = document.createElement("button");
                optionElement.type = "button";
                optionElement.textContent = size;
                optionElement.value = size;
                optionElement.addEventListener("click", () => toggleOption(optionElement));
                rowElement.appendChild(optionElement);
            }
        }

        filterElement.appendChild(rowElement);
    }
}

// Função para obter o rótulo da opção
function getOptionLabel(option: string | number): string {
    if (typeof option === "number") {
        return `Até R$ ${option.toFixed(2)}`;
    } else {
        return option;
    }
}

// Função para alternar a seleção de uma opção
function toggleOption(button: HTMLButtonElement): void {
    button.classList.toggle("selected");
    applyFilters();
}

// Função para preencher o filtro de preço
function populatePriceFilter(prices: Set<number>, filterElement: HTMLElement, filterName: string): void {
    // Limpa o filtro de preço
    filterElement.innerHTML = '';

    // Cria as opções do filtro de preço
    const priceRanges: { min: number; max: number }[] = [
        { min: 0, max: 50 },
        { min: 51, max: 150 },
        { min: 151, max: 300 },
        { min: 301, max: 500 },
        { min: 501, max: Infinity }
    ];

    priceRanges.forEach(range => {
        const inputElement: HTMLInputElement = document.createElement("input");
        inputElement.type = "checkbox";
        inputElement.name = filterName;
        inputElement.value = `${range.min},${range.max}`;
        inputElement.addEventListener("change", applyFilters);

        const labelElement: HTMLLabelElement = document.createElement("label");

        const spanText: HTMLSpanElement = document.createElement("span");
        spanText.textContent = `R$ ${range.min} - R$ ${range.max}`;
        labelElement.appendChild(inputElement);
        labelElement.appendChild(spanText);

        const listItem: HTMLLIElement = document.createElement("li");
        listItem.appendChild(labelElement);

        filterElement.appendChild(listItem);
    });
}

// Função para aplicar os filtros
function applyFilters(): void {
    const colorFilter: NodeListOf<HTMLInputElement> = document.querySelectorAll<HTMLInputElement>('input[name="color"]:checked');
    const sizeFilter: NodeListOf<HTMLButtonElement> = document.querySelectorAll<HTMLButtonElement>('.size-row button.selected');
    const priceFilter: NodeListOf<HTMLInputElement> = document.querySelectorAll<HTMLInputElement>('input[name="price"]:checked');

    const selectedColors: string[] = Array.from(colorFilter).map(input => input.value);
    const selectedSizes: string[] = Array.from(sizeFilter).map(button => button.value);
    const selectedPrices: { min: number; max: number }[] = Array.from(priceFilter).map(input => {
        const [min, max]: number[] = input.value.split(',').map(Number);
        return { min, max };
    });

    const productsContainer: HTMLElement | null = document.querySelector(".product-grid");
    if (productsContainer) {
        const products: HTMLElement[] = Array.from(productsContainer.children) as HTMLElement[];
        products.forEach(product => {
            const productColor: string | undefined = product.dataset.color;
            const productSizes: string[] = product.dataset.size.split(",");
            const productPrice: number = parseFloat(product.dataset.price);

            const isVisible: boolean = (
                (selectedColors.length === 0 || selectedColors.includes(productColor as string)) &&
                (selectedSizes.length === 0 || selectedSizes.some(size => productSizes.includes(size))) &&
                (selectedPrices.length === 0 || selectedPrices.some(priceRange => productPrice >= priceRange.min && productPrice <= priceRange.max))
            );

            product.style.display = isVisible ? "block" : "none";
        });
    }
}

// Evento de clique no contador de itens do carrinho
const cartCountElement: HTMLElement | null = document.querySelector(".cart-count");
if (cartCountElement) {
    cartCountElement.addEventListener("click", () => {
        // Abrir o modal com os itens do carrinho
        openCartModal(cartItems);
    });
}

// Função para abrir o modal do carrinho
function openCartModal(cartItems: Product[]): void {
    const modalContent: HTMLDivElement = document.createElement("div");
    modalContent.classList.add("modal-content");

    const closeButton: HTMLSpanElement = document.createElement("span");
    closeButton.classList.add("close");
    closeButton.textContent = "×";
    closeButton.addEventListener("click", closeCartModal);
    modalContent.appendChild(closeButton);

    const itemList: HTMLUListElement = document.createElement("ul");
    cartItems.forEach(item => {
        const listItem: HTMLLIElement = document.createElement("li");
        listItem.textContent = item.name;
        itemList.appendChild(listItem);
    });
    modalContent.appendChild(itemList);

    const modal: HTMLDivElement = document.createElement("div");
    modal.classList.add("modal");
    modal.appendChild(modalContent);

    document.body.appendChild(modal);
}

// Função para fechar o modal do carrinho
function closeCartModal(): void {
    const modal: HTMLDivElement | null = document.querySelector(".modal");
    if (modal) {
        document.body.removeChild(modal);
    }
}

// Evento de clique no botão "Mostrar mais produtos"
const loadMoreButton: HTMLElement | null = document.querySelector(".load-more-button");
if (loadMoreButton) {
    loadMoreButton.addEventListener("click", loadMoreProducts);
}

// Função para carregar mais produtos
async function loadMoreProducts(): Promise<void> {
    try {
        const products: Product[] = await loadProducts(productsLoaded, productsPerPage);
        console.log(products); // Exibe os produtos no console para verificação
        if (products.length > 0) {
            displayProducts(products); // Exibe os produtos na interface do usuário
            productsLoaded += products.length; // Atualiza o contador de produtos carregados
            await setupFilters(); // Atualiza os filtros com base nos produtos carregados
            if (productsLoaded >= 14) {
                // Desabilita o botão "Mostrar mais" quando todos os produtos forem carregados
                const loadMoreButton: HTMLElement | null = document.querySelector(".load-more-button");
                if (loadMoreButton) {
                    loadMoreButton.setAttribute("disabled", "true");
                }
            }
        } else {
            console.log("Não há mais produtos para carregar.");
            // Adicione aqui o código para informar ao usuário que não há mais produtos para carregar, se necessário.
        }
    } catch (error) {
        console.error("Erro ao carregar mais produtos:", error);
    }
}

// Função para alternar a visibilidade da seção de filtros
function toggleFiltersContainer(): void {
    const filtersContainer: HTMLElement | null = document.querySelector(".filters-container");
    if (filtersContainer) {
        filtersContainer.classList.toggle("hidden");
    }
}

// Adiciona um evento de clique ao botão de toggle de filtros
const filterToggle: HTMLElement | null = document.querySelector('.filter-toggle');
if (filterToggle) {
    filterToggle.addEventListener('click', toggleFiltersContainer);
}

// Função para alternar a visibilidade dos itens do filtro
function toggleFilterItems(h3Element: Element): void {
    const filterItems: HTMLElement | null = h3Element.nextElementSibling as HTMLElement | null; // Elemento irmão que contém os itens

    if (filterItems) {
        filterItems.classList.toggle('hidden');
    }
}

// Configura os eventos de clique nos títulos dos filtros
function setupFilterToggle(): void {
    const filterHeadings: NodeListOf<Element> = document.querySelectorAll('.filter-section h3');

    filterHeadings.forEach(h3 => {
        h3.addEventListener('click', () => {
            toggleFilterItems(h3);
        });
    });
}

function addMobileFilterBar(): void {
  if (window.matchMedia("(max-width: 768px)").matches) {
    const filterBar = document.querySelector(".filter-bar");
    if (!filterBar) {
      const newFilterBar = document.createElement("div");
      newFilterBar.classList.add("filter-bar");
      newFilterBar.innerHTML = `<h3>FILTROS</h3><button onclick="toggleFiltersContainer()">Fechar</button>`;
      const filtersSection = document.querySelector(".filters-container");
      filtersSection?.insertBefore(newFilterBar, filtersSection.firstChild);
    }
  }
}




// Função para atualizar a visualização com base no tamanho da tela
function updateView(): void {
    isMobileView = window.innerWidth <= mobileScreenWidth;

    if (isMobileView) {
        addMobileFilterBar(); // Adiciona a barra de título e o botão de fechar filtro na versão móvel
    } else {
        const filtersContainer: HTMLElement | null = document.querySelector(".filters-container");
        if (filtersContainer) {
            filtersContainer.classList.remove("hidden"); // Exibe o container de filtros na versão desktop
        }
    }

    // Configura os eventos de clique nos títulos dos filtros
    setupFilterToggle();
}
// Função para criar o modal de ordenação
function createSortModal(sortOptions: SortOption[]): void {
  const modalOverlay = document.createElement("div");
  modalOverlay.classList.add("modal-overlay");
  modalOverlay.innerHTML = `
    <div class="modal-container">
      <div class="modal-header"><h2>Ordenar</h2><button class="close-button">X</button></div>
      <div class="modal-section">${sortOptions.map(option => `<button>${option.label}</button>`).join('')}</div>
      <div class="modal-footer"><button>Aplicar</button><button>Limpar</button></div>
    </div>`;

  const closeButton = modalOverlay.querySelector('.close-button');
  closeButton?.addEventListener("click", () => document.body.removeChild(modalOverlay));

  const applyButton = modalOverlay.querySelector('.modal-footer button');
  applyButton?.addEventListener("click", () => document.body.removeChild(modalOverlay));

  document.body.appendChild(modalOverlay);
}

// Adiciona um evento de clique ao botão de toggle de ordenação
const sortToggle = document.querySelector('.sort-toggle');
if (sortToggle) {
  sortToggle.addEventListener('click', () => {
      const sortOptions = [
          { label: "Mais Recentes", action: () => console.log("Mais Recentes") },
          { label: "Mais Baratos", action: () => console.log("Mais Baratos") },
          { label: "Mais Caros", action: () => console.log("Mais Caros") }
      ];
      createSortModal(sortOptions);
  });
}


// Atualiza a visualização quando a janela é redimensionada
window.addEventListener('resize', updateView);

// Exporta as funções necessárias para teste
export { toggleOption, populatePriceFilter, applyFilters };
